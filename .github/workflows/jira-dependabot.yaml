name: Dependabot Jira Integration

on:
  pull_request:
    branches:
      - main # Or your default branch (e.g., main, master)

jobs:
  create_jira_ticket:
    permissions:
      pull-requests: read
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]' # Only run for Dependabot PRs
    steps:
      - name: Fetch Dependabot metadata
        id: dependabot-metadata
        uses: dependabot/fetch-metadata@v2
        with:
          alert-lookup: true
          compat-lookup: true
          github-token: "${{ secrets.JIRA_GH_TOKEN }}"
          skip-commit-verification: true
          skip-verification: true

      - uses: actions/github-script@v7
        id: get-alert
        with:
          github-token: "${{ secrets.JIRA_GH_TOKEN }}"
          result-encoding: string
          retries: 3
          retry-exempt-status-codes: 400,401
          script: |
            const alerts = await github.rest.dependabot.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
            });

            let severity = null;
            console.log(`Dependency names: ${{ steps.dependabot-metadata.outputs.dependency-names }}`);
            const dependencyNames = '${{ steps.dependabot-metadata.outputs.dependency-names }}'
            for (const alert of alerts.data) {
              console.log(`Checking alert for dependency: ${alert.dependency.package.name}`);
              if (alert.dependency.package.name.includes(dependencyNames)) {
                
                severity = alert.security_advisory.severity.toUpperCase();
                description = alert.security_advisory.summary.replace(/`|"|'/g, "");
                cvss_score = alert.security_advisory.cvss.score;
                console.log(`Found matching alert with severity: ${severity}`);
                console.log(`Description: ${description}`);
                console.log(`CVSS Score: ${cvss_score}`);
                break;
              }
            }

            if (severity !== null) {
              core.setOutput('severity', severity);
              switch (severity) {
                case 'LOW':
                  core.setOutput('priority', 'P3');
                  break;
                case 'MEDIUM':
                  core.setOutput('priority', 'P2');
                  break;
                case 'HIGH':
                  core.setOutput('priority', 'P1');
                  break;
                case 'CRITICAL':
                  core.setOutput('priority', 'P0');
                  break;
              };
              core.setOutput('description', description);
              core.setOutput('cvss', cvss_score);
            } else {
              throw new Error("No matching Dependabot alert found for the given dependencies.");
            }
            
      - name: Description Formatter
        id: description-formatter
        env:
          PR: ${{ github.event.pull_request.html_url }}
          BRANCH: ${{ github.head_ref }}
          REPO: ${{ github.repository }}
          SEVERITY: ${{ steps.get-alert.outputs.severity }}
          PRIORITY: ${{ steps.get-alert.outputs.priority }}
          CVSS: ${{ steps.get-alert.outputs.cvss }}
          DESCRIPTION: ${{ steps.get-alert.outputs.description }}
        run: |
          description=$(cat << EOF
          Dependabot has created a pull request to update dependencies.
          PR: $PR
          Branch: $BRANCH
          Severity: $SEVERITY
          CVSS Score: $CVSS
          Description: $DESCRIPTION
          To confirm the fix, apply the patch and provide testing steps to verify no existing features are broken.
          EOF
          )
          description="${description//$'\n'/'\\n'}"
          echo "description=$description" >> "$GITHUB_OUTPUT"
          
      - name: Create Jira Ticket
        uses: brandlive1941/action-jira-integration@v1  # Use the latest version
        if: github.actor == 'dependabot[bot]' # Only run for Dependabot PRs
        with:
          action: "create"
          token: ${{ secrets.JIRA_TOKEN }} # Store your Jira API token in GitHub Secrets
          jira_url: ${{ vars.JIRA_URL }}
          project: ${{ vars.JIRA_PROJECT }} # Replace with your Jira project key
          issue_type: "10002" # Task ticket type
          customer_impact_area: ${{ vars.JIRA_CUSTOMER_IMPACT_AREA }} # Optional: Specify the customer impact area
          summary: "${{ steps.get-alert.outputs.severity }} severity [Dependabot] Security update for ${{ github.repository }}" 
          description: "${{ steps.description-formatter.outputs.description }}"
          priority: ${{ steps.get-alert.outputs.priority}} # Or "High", "Low", etc.
          label: "security" # Optional: Add a label to the Jira ticket

  test_create_jira_ticket:
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]' # Only run for non Dependabot PRs
    steps:
      - name: Test Create Ticket
        uses: brandlive1941/action-jira-integration@main  # Use the latest version
        with:
          action: "create"
          token: ${{ secrets.JIRA_TOKEN }} # Store your Jira API token in GitHub Secrets
          jira_url: ${{ vars.JIRA_URL }}
          project: ${{ vars.JIRA_PROJECT }} # Replace with your Jira project key
          issue_type: "10002" # Task ticket type
          customer_impact_area: ${{ vars.JIRA_CUSTOMER_IMPACT_AREA }} # Optional: Specify the customer impact area
          summary: "testing ticket creation for ${{ github.repository }}" 
          description: "testing ticket creation for ${{ github.repository }}" 
          priority: "low" # Or "High", "Low", etc.
          label: "devops" # Optional: Add a label to the Jira ticket
          dry_run: true